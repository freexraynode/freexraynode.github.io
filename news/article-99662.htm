<!doctype html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://freexraynode.github.io/news/article-99662.htm" />
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>【SpringMVC笔记02】SpringMVC接收请求参数的几种方式</title>
        <meta name="description" content="这篇文章，主要介绍SpringMVC框架中接收请求参数的几种方式。  目录 一、SpringMVC接收请求参数 1.1、通过方法参数接收 1.2、通过HttpServletRequest接收参数 1." />
        <link rel="icon" href="/assets/website/img/freexraynode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Free Xray Node机场节点官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://freexraynode.github.io/news/article-99662.htm" />
    <meta property="og:site_name" content="Free Xray Node机场节点官网" />
    <meta property="og:title" content="【SpringMVC笔记02】SpringMVC接收请求参数的几种方式" />
    <meta property="og:image" content="https://freexraynode.github.io/uploads/20240820-3/df8bad311d11390fd1b316f8552775e3.webp" />
        <meta property="og:release_date" content="2025-04-19T08:59:06" />
    <meta property="og:updated_time" content="2025-04-19T08:59:06" />
        <meta property="og:description" content="这篇文章，主要介绍SpringMVC框架中接收请求参数的几种方式。  目录 一、SpringMVC接收请求参数 1.1、通过方法参数接收 1.2、通过HttpServletRequest接收参数 1." />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="【SpringMVC笔记02】SpringMVC接收请求参数的几种方式">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <!-- google-fonts -->
    <link href="//fonts.googleapis.com/css2?family=Roboto:wght@100;300;400;500;700;900&display=swap" rel="stylesheet">
    <!-- //google-fonts -->
    <!-- Template CSS Style link -->
    <link rel="stylesheet" href="/assets/website/css/freexraynode/style-starter.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-768TFY4KSC"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-768TFY4KSC');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!--header-->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                <span>Free Xray Node</span>
                                </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-lg-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/free-nodes/">免费节点</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/client.htm">客户端</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/news/">新闻资讯</a>
                        </li>
                                            </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="cont-ser-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!--//header-->
    <!-- inner banner -->
    <div class="inner-banner">
        <section class="w3l-breadcrumb">
            <div class="container">
                <h1 class="inner-text-title font-weight-bold mb-sm-3 mb-2">【SpringMVC笔记02】SpringMVC接收请求参数的几种方式</h1>
                <ul class="breadcrumbs-custom-path">
                    <li><a href="/">首页</a></li>
                    <li><a href="/news/"><span class="fa fa-chevron-right mx-2" aria-hidden="true"></span>新闻资讯</a></li>
                    <li class="active"><span class="fa fa-chevron-right mx-2" aria-hidden="true"></span>正文</li>
                </ul>
            </div>
        </section>
    </div>
    <!-- //inner banner -->
    <!-- middle section -->
    <section class="w3l-servicesblock py-md-5 py-4">
        <div class="container pb-2">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="XRayNode每日订阅站" data-url="https://xraynode.github.io">
                  				  				  				<div id="content_views" class="htmledit_views"> <blockquote> <p><strong>这篇文章，主要介绍SpringMVC框架中接收请求参数的几种方式。</strong></p> </blockquote> <p id="main-toc"><strong>目录</strong></p> <p id="%E4%B8%80%E3%80%81SpringMVC%E6%8E%A5%E6%94%B6%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0-toc" style="margin-left:0px;"><a href="#%E4%B8%80%E3%80%81SpringMVC%E6%8E%A5%E6%94%B6%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0" rel="nofollow">一、SpringMVC接收请求参数</a></p> <p id="1.1%E3%80%81%E9%80%9A%E8%BF%87%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0%E6%8E%A5%E6%94%B6-toc" style="margin-left:40px;"><a href="#1.1%E3%80%81%E9%80%9A%E8%BF%87%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0%E6%8E%A5%E6%94%B6" rel="nofollow">1.1、通过方法参数接收</a></p> <p id="1.2%E3%80%81%E9%80%9A%E8%BF%87HttpServletRequest%E6%8E%A5%E6%94%B6%E5%8F%82%E6%95%B0-toc" style="margin-left:40px;"><a href="#1.2%E3%80%81%E9%80%9A%E8%BF%87HttpServletRequest%E6%8E%A5%E6%94%B6%E5%8F%82%E6%95%B0" rel="nofollow">1.2、通过HttpServletRequest接收参数</a></p> <p id="1.3%E3%80%81%40RequestParam%E6%B3%A8%E8%A7%A3%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0-toc" style="margin-left:40px;"><a href="#1.3%E3%80%81%40RequestParam%E6%B3%A8%E8%A7%A3%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0" rel="nofollow">1.3、@RequestParam注解获取参数</a></p> <p id="1.4%E3%80%81%E9%80%9A%E8%BF%87JavaBean%E5%AF%B9%E8%B1%A1%E6%8E%A5%E6%94%B6%E5%8F%82%E6%95%B0-toc" style="margin-left:40px;"><a href="#1.4%E3%80%81%E9%80%9A%E8%BF%87JavaBean%E5%AF%B9%E8%B1%A1%E6%8E%A5%E6%94%B6%E5%8F%82%E6%95%B0" rel="nofollow">1.4、通过JavaBean对象接收参数</a></p> <p id="1.5%E3%80%81%E9%80%9A%E8%BF%87%40PathVariable%E6%B3%A8%E8%A7%A3%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0-toc" style="margin-left:40px;"><a href="#1.5%E3%80%81%E9%80%9A%E8%BF%87%40PathVariable%E6%B3%A8%E8%A7%A3%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0" rel="nofollow">1.5、通过@PathVariable注解获取参数</a></p> <hr id="hr-toc"/> </h1> <p>这篇文章主要总结一下SpringMVC框架中，如何接收HTTP请求的参数，主要有如下几种常见的方式。</p> <h2 id="1.1%E3%80%81%E9%80%9A%E8%BF%87%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0%E6%8E%A5%E6%94%B6">1.1、通过方法参数接收</h2> <p>SpringMVC框架里面，我们可以直接在【Controller】层对应的方法参数里面，编写我们需要接收的参数名称，这样SpringMVC框架就会自动将我们的请求参数和方法参数进行映射绑定。</p> <ul> <li><strong>编写如下测试案例。</strong></li> </ul> <pre><code class="language-java">@Controller public class ParamController {          // 请求参数和方法参数自动映射     @RequestMapping("/param01")     public String param01(String username, String password) {         System.out.println("username=" + username);         System.out.println("password=" + password);         return "hello";     }      }</code></pre> <ul> <li><strong>启动工程，浏览器访问：【http://localhost:8080/springmvc/param01】，然后查看控制台输出结果。</strong></li> <li><strong>访问时候携带参数：【http://localhost:8080/springmvc/param01?username=root&amp;password=123456】。</strong></li> </ul> <p><img fetchpriority="high" decoding="async" alt="" height="193" src="http://img.555519.xyz/uploads/20230224/82379e43f1833c864a5a8eae5e09f2f4.jpg"></p> <ul> <li> <strong>SpringMVC中，如果接收的参数名称和方法参数名称不同，那么对应的方法参数默认就是null。</strong>&nbsp;</li> </ul> <h2 id="1.2%E3%80%81%E9%80%9A%E8%BF%87HttpServletRequest%E6%8E%A5%E6%94%B6%E5%8F%82%E6%95%B0">1.2、通过HttpServletRequest接收参数</h2> <p>在SpringMVC框架中，我们的方法参数里面可以直接使用servlet中的请求对象，要使用servlet的相关api，那么我们需要引入【servlet-api】的依赖，如下所示：</p> <ul> <li><strong>添加【servlet-api】依赖，目的是为了可以在项目中使用servlet相关的类代码。</strong></li> </ul> <pre><code class="language-XML">&lt;!-- 引入servlet-api依赖 --&gt; &lt;dependency&gt;   &lt;groupId&gt;javax.servlet&lt;/groupId&gt;   &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;   &lt;version&gt;2.5&lt;/version&gt;   &lt;!-- 作用域设置为已被提供: 表示servlet-api依赖会被Tomcat容器提供，   打包时候不会再将servlet-api加入到里面 --&gt;   &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt;</code></pre> <ul> <li><strong>通过【HttpServletRequest】获取请求参数。</strong></li> </ul> <pre><code class="language-java">@Controller public class ParamController {      // HttpServletRequest获取参数     @RequestMapping("/param02")     public String param02(HttpServletRequest request) {         System.out.println("username=" + request.getParameter("username"));         System.out.println("password=" + request.getParameter("password"));         return "hello";     } }</code></pre> <ul> <li><strong>这种获取参数的方式就是最原始的，直接从HTTP请求里面获取。</strong></li> </ul> <h2 id="1.3%E3%80%81%40RequestParam%E6%B3%A8%E8%A7%A3%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0">1.3、@RequestParam注解获取参数</h2> <p>通过【1.1】的方式获取参数时候，如果我们的前端参数名称和后端方法参数名称不一致，就无法获取到对应的参数值，为了解决前后端参数名称不一致的问题，SpringMVC框架提供了<span style="color:#fe2c24;"><strong>【@RequestParam】</strong></span>注解，解决参数名称不一致的问题。</p> <pre><code class="language-java">@Controller public class ParamController {      // HttpServletRequest获取参数     @RequestMapping("/param03")     public String param03(@RequestParam("uname") String username, @RequestParam("pass") String password) {         System.out.println("username=" + username);         System.out.println("password=" + password);         return "hello";     }      }</code></pre> <ul> <li><strong>浏览器访问地址：【http://localhost:8080/springmvc/param01?<span style="color:#fe2c24;">uname</span>=root&amp;<span style="color:#fe2c24;">pass</span>=123456】。</strong></li> <li><strong>注意：浏览器的请求参数名称是uname、pass，而后端方法参数名称是：username、password。</strong></li> </ul> <p><img decoding="async" alt="" class="left" height="316" src="http://img.555519.xyz/uploads/20230224/95f05d8ff548cd84da63d04747e2676f.jpg"></p> <h2 id="1.4%E3%80%81%E9%80%9A%E8%BF%87JavaBean%E5%AF%B9%E8%B1%A1%E6%8E%A5%E6%94%B6%E5%8F%82%E6%95%B0">1.4、通过JavaBean对象接收参数</h2> <p>存在这样一种情况，当我们的前端参数数量特别多的时候，如果按照方法参数来接收，那么此时一个方法里面可能就需要写几十个参数名称，显然这样是不合理的，解决这个问题的办法就是通过一个对象来接收前端所有的参数，这个对象就是我们说的一个JavaBean，也就是pojo实体类对象。</p> <ul> <li><strong>创建【User】实体类。</strong></li> </ul> <pre><code class="language-java">public class User {     private String username;     private String password;      public String getUsername() {         return username;     }     public void setUsername(String username) {         this.username = username;     }     public String getPassword() {         return password;     }     public void setPassword(String password) {         this.password = password;     } }</code></pre> <ul> <li><strong>通过【Bean】对象接收参数。</strong></li> </ul> <pre><code class="language-java">@Controller public class ParamController {      // HttpServletRequest获取参数     @RequestMapping("/param04")     public String param04(User user) {         System.out.println("username=" + user.getUsername());         System.out.println("password=" + user.getPassword());         return "hello";     }  }</code></pre> <ul> <li><strong>浏览器访问：【http://localhost:8080/springmvc/param04?username=root&amp;password=123456】。</strong></li> <li><strong>可以发现，后端依然可以获取到对应的参数值。</strong></li> </ul> <p><img decoding="async" alt="" class="left" height="283" src="http://img.555519.xyz/uploads/20230224/1a8314e82c17e19b39607e0eaea0a6b3.jpg"></p> <h2 id="1.5%E3%80%81%E9%80%9A%E8%BF%87%40PathVariable%E6%B3%A8%E8%A7%A3%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0">1.5、通过@PathVariable注解获取参数</h2> <p>在Restful风格的HTTP请求里面，有些请求参数会直接放在请求路径里面，并且没有参数名称，对于这种在请求路径中并且没有参数名称的请求参数，SpringMVC框架提供了<span style="color:#fe2c24;"><strong>【@PathVariable】</strong></span>注解进行获取，这种获取参数的方式，叫做：<strong>【路径参数】</strong>。</p> <ul> <li><strong>路径参数，类似于：【/api/param01/<span style="color:#fe2c24;">root</span>/<span style="color:#fe2c24;">123456</span>】。（红色字体表示参数值，其余表示请求路径）。</strong></li> <li><strong>SpringMVC里面，路径参数语法格式如下：</strong></li> </ul> <blockquote> <p><strong>路径参数：【/请求路径/<span style="color:#fe2c24;">{参数名称1}</span>/<span style="color:#fe2c24;">{参数名称2}</span>】</strong></p> <ul> <li><strong>路径参数需要使用【{}】花括号括起来，参数名称任意。</strong></li> </ul> </blockquote> <pre><code class="language-java">@Controller public class ParamController {      // HttpServletRequest获取参数     @RequestMapping("/param05/{username}/{password}")     public String param05(@PathVariable String username, @PathVariable String password) {         System.out.println("username=" + username);         System.out.println("password=" + password);         return "hello";     }  }</code></pre> <ul> <li><strong>路径参数中的参数名称需要和方法参数名称一致，这样SpringMVC才能够将其进行映射；</strong></li> <li><strong>也可以通过指定【@PathVariable】注解的【value】属性值来关联路径参数。</strong></li> </ul> <pre><code class="language-java">@Controller public class ParamController {      // HttpServletRequest获取参数     @RequestMapping("/param05/{uname}/{pass}") {     public String param05(@PathVariable("uname") String username, @PathVariable("pass") String password) {         System.out.println("username=" + username);         System.out.println("password=" + password);         return "hello";     }  }</code></pre> <ul> <li><strong>上面两种方式都可以，但是实际开发中，还是采用第二种，尽量指定【@PathVariable】注解的【value】属性值，因为这样更容易理解，并且可以确保不出错。</strong></li> </ul> <p><img loading="lazy" decoding="async" alt="" class="left" height="468" src="http://img.555519.xyz/uploads/20230224/68c7aed9b9e3022a169e1c263e7d4c20.jpg"></p> <blockquote> <p><strong>综上，这篇文章结束了，主要介绍SpringMVC框架中接收请求参数的几种常见方式。</strong></p> </blockquote> <p><strong>【源代码地址：<a class="link-info" href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://gitee.com/zhuyoubin/ssm_code/tree/master/spring-mvc/springmvc-demo02"  title="https://gitee.com/zhuyoubin/ssm_code/tree/master/spring-mvc/springmvc-demo02" rel="nofollow">https://gitee.com/zhuyoubin/ssm_code/tree/master/spring-mvc/springmvc-demo02</a>】。</strong></p> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-98879.htm">动物诊疗管理机构办法（动物诊疗机构管理办法所称的动物诊疗活动不包括）</a></p>
                                        <p>下一个：<a href="/news/article-99665.htm">动物疫苗价格表最新图片高清大图及价格（动物 疫苗）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-88528.htm" title="猫三联三针和两针的区别图片（猫三联三针一共多少钱）">猫三联三针和两针的区别图片（猫三联三针一共多少钱）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-15-node-share-links.htm" title="「3月15日」最高速度20.2M/S，2025年Free Xray Node每天更新免费机场订阅节点链接">「3月15日」最高速度20.2M/S，2025年Free Xray Node每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-5-winxray-node-github.htm" title="「3月5日」最高速度22.2M/S，2025年Free Xray Node每天更新免费机场订阅节点链接">「3月5日」最高速度22.2M/S，2025年Free Xray Node每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/news/article-79289.htm" title="宠物猫驱虫多少钱一次喵旺清虫（喵汪清宠驱虫药）">宠物猫驱虫多少钱一次喵旺清虫（喵汪清宠驱虫药）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-29-free-high-speed-nodes.htm" title="「3月29日」最高速度22.3M/S，2025年Free Xray Node每天更新免费机场订阅节点链接">「3月29日」最高速度22.3M/S，2025年Free Xray Node每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-17-today-winxray-node.htm" title="「3月17日」最高速度19.7M/S，2025年Free Xray Node每天更新免费机场订阅节点链接">「3月17日」最高速度19.7M/S，2025年Free Xray Node每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-22-free-subscribe-node.htm" title="「3月22日」最高速度18M/S，2025年Free Xray Node每天更新免费机场订阅节点链接">「3月22日」最高速度18M/S，2025年Free Xray Node每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-3-free-node-subscribe.htm" title="「3月3日」最高速度18.1M/S，2025年Free Xray Node每天更新免费机场订阅节点链接">「3月3日」最高速度18.1M/S，2025年Free Xray Node每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-16-winxray-github.htm" title="「3月16日」最高速度18.1M/S，2025年Free Xray Node每天更新免费机场订阅节点链接">「3月16日」最高速度18.1M/S，2025年Free Xray Node每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/news/article-96710.htm" title="动物疫苗品牌排名前十 动物疫苗品牌排名前十名">动物疫苗品牌排名前十 动物疫苗品牌排名前十名</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">90</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
    <!-- //middle section -->
        <!-- footer -->
    <footer class="w3l-footer-22 position-relative mt-5 pt-5">
        <!-- copyright -->
        <div class="copyright-footer text-center">
            <div class="container">
                <div class="columns">
                                        <p>
                                                <a href="/">首页</a> |
                                                <a href="/free-nodes/">免费节点</a> |
                                                <a href="/paid-subscribe/">推荐机场</a> |
                                                <a href="/client.htm">客户端</a> |
                                                <a href="/news/">新闻资讯</a> |
                                                <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                    <p>Free Xray Node机场节点官网 版权所有 Powered by WordPress</p>
                </div>
            </div>
        </div>
        <!-- //copyright -->
    </footer>
    <!-- //footer -->
    <!-- Js scripts -->
    <!-- move top -->
    <button onclick="topFunction()" id="movetop" title="Go to top">
        <span class="fa fa-level-up" aria-hidden="true"></span>
    </button>
    <script>
    // When the user scrolls down 20px from the top of the document, show the button
    window.onscroll = function() {
        scrollFunction()
    };

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            document.getElementById("movetop").style.display = "block";
        } else {
            document.getElementById("movetop").style.display = "none";
        }
    }

    // When the user clicks on the button, scroll to the top of the document
    function topFunction() {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
    }
    </script>
    <!-- //move top -->
    <!-- common jquery plugin -->
    <script src="/assets/website/js/frontend/freexraynode/jquery-3.5.1.min.js"></script>
    <!-- //common jquery plugin -->
    <!-- theme switch js (light and dark)-->
    <script src="/assets/website/js/frontend/freexraynode/theme-change.js"></script>
    <script>
    function autoType(elementClass, typingSpeed) {
        var thhis = $(elementClass);
        thhis.css({
            "position": "relative",
            "display": "inline-block"
        });
        thhis.prepend('<div class="cursor" style="right: initial; left:0;"></div>');
        thhis = thhis.find(".text-js");
        var text = thhis.text().trim().split('');
        var amntOfChars = text.length;
        var newString = "";
        thhis.text("|");
        setTimeout(function() {
            thhis.css("opacity", 1);
            thhis.prev().removeAttr("style");
            thhis.text("");
            for (var i = 0; i < amntOfChars; i++) {
                (function(i, char) {
                    setTimeout(function() {
                        newString += char;
                        thhis.text(newString);
                    }, i * typingSpeed);
                })(i + 1, text[i]);
            }
        }, 1500);
    }

    $(document).ready(function() {
        // Now to start autoTyping just call the autoType function with the 
        // class of outer div
        // The second paramter is the speed between each letter is typed.   
        autoType(".type-js", 200);
    });
    </script>
    <!-- //theme switch js (light and dark)-->
    <!-- magnific popup -->
    <script src="/assets/website/js/frontend/freexraynode/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //magnific popup -->
    <!-- MENU-JS -->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!-- //MENU-JS -->
    <!-- for testimonials carousel -->
    <script src="/assets/website/js/frontend/freexraynode/owl.carousel.js"></script>
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: true
                },
                600: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 1,
                    nav: true,
                    loop: true
                }
            }
        })
    })
    </script>
    <!-- //for testimonials carousel -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })
    });
    </script>
    <!-- //disable body scroll which navbar is in active -->
    <!--bootstrap-->
    <script src="/assets/website/js/frontend/freexraynode/bootstrap.min.js"></script>
    <!-- //bootstrap-->
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
    <!-- //Js scripts -->
</body>

</html>