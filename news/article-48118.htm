<!doctype html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://freexraynode.github.io/news/article-48118.htm" />
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>面试官：@Transactional 注解是如何实现的？面试必问！</title>
        <meta name="description" content="点击关注公众号，Java干货及时送达 @Transactional注解简介 @Transactional是spring中声明式事务管理的注解配置方式，相信这个注解的作用大家都很清楚。@Transact" />
        <link rel="icon" href="/assets/website/img/freexraynode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Free Xray Node机场节点官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://freexraynode.github.io/news/article-48118.htm" />
    <meta property="og:site_name" content="Free Xray Node机场节点官网" />
    <meta property="og:title" content="面试官：@Transactional 注解是如何实现的？面试必问！" />
    <meta property="og:image" content="https://freexraynode.github.io/uploads/20240820-3/16e744133d4597c217d01c2412d03c93.webp" />
        <meta property="og:release_date" content="2025-01-29T10:29:39" />
    <meta property="og:updated_time" content="2025-01-29T10:29:39" />
        <meta property="og:description" content="点击关注公众号，Java干货及时送达 @Transactional注解简介 @Transactional是spring中声明式事务管理的注解配置方式，相信这个注解的作用大家都很清楚。@Transact" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="面试官：@Transactional 注解是如何实现的？面试必问！">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <!-- google-fonts -->
    <link href="//fonts.googleapis.com/css2?family=Roboto:wght@100;300;400;500;700;900&display=swap" rel="stylesheet">
    <!-- //google-fonts -->
    <!-- Template CSS Style link -->
    <link rel="stylesheet" href="/assets/website/css/freexraynode/style-starter.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-768TFY4KSC"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-768TFY4KSC');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!--header-->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                                <a class="navbar-brand" href="/">
                    <span>Free Xray Node</span>
                </a>
                                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-lg-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/free-nodes/">免费节点</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/news/">新闻资讯</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="cont-ser-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!--//header-->
    <!-- inner banner -->
    <div class="inner-banner">
        <section class="w3l-breadcrumb">
            <div class="container">
                <h1 class="inner-text-title font-weight-bold mb-sm-3 mb-2">面试官：@Transactional 注解是如何实现的？面试必问！</h1>
                <ul class="breadcrumbs-custom-path">
                    <li><a href="/">首页</a></li>
                    <li><a href="/news/"><span class="fa fa-chevron-right mx-2" aria-hidden="true"></span>新闻资讯</a></li>
                    <li class="active"><span class="fa fa-chevron-right mx-2" aria-hidden="true"></span>正文</li>
                </ul>
            </div>
        </section>
    </div>
    <!-- //inner banner -->
    <!-- middle section -->
    <section class="w3l-servicesblock py-md-5 py-4">
        <div class="container pb-2">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="XRayNode每日订阅站" data-url="https://xraynode.github.io">
                  				  				  				<div id="content_views" class="htmledit_views"> <div id="js_content"> <p style="text-align:left;"><strong></strong><strong>点击关注公众号，Java干货</strong><strong>及时送达</strong><img decoding="async" src="http://img.555519.xyz/uploads/20230206/3bb68af096483f40c8f67a5dfd1314c1.jpg" alt="面试官：@Transactional 注解是如何实现的？面试必问！"></p> <h2>@Transactional注解简介</h2> <p><code>@Transactional</code>是spring中声明式事务管理的注解配置方式，相信这个注解的作用大家都很清楚。<code>@Transactional</code>注解可以帮助我们把事务开启、提交或者回滚的操作，通过aop的方式进行管理。</p> <p>通过<code>@Transactional</code>注解就能让spring为我们管理事务，免去了重复的事务管理逻辑，减少对业务代码的侵入，使我们开发人员能够专注于业务层面开发。</p> <p> <img decoding="async" src="http://img.555519.xyz/uploads/20230206/fd91fff6485225409d780e00d5ebaa09.jpg" alt="面试官：@Transactional 注解是如何实现的？面试必问！"></p> <p>我们知道实现@Transactional原理是基于spring aop，aop又是动态代理模式的实现，通过对源码的阅读，总结出下面的步骤来了解实际中，在spring 是如何利用aop来实现@Transactional的功能的。</p> <h2>spring中声明式事务实现原理猜想</h2> <p>首先，对于spring中aop实现原理有了解的话，应该知道想要对一个方法进行代理的话，肯定需要定义切点。在@Transactional的实现中，同样如此，spring为我们定义了以 @Transactional 注解为植入点的切点，这样才能知道@Transactional注解标注的方法需要被代理。</p> <p>有了切面定义之后，在spring的bean的初始化过程中，就需要对实例化的bean进行代理，并且生成代理对象。</p> <p>生成代理对象的代理逻辑中，进行方法调用时，需要先获取切面逻辑，@Transactional注解的切面逻辑类似于@Around，在spring中是实现一种类似代理逻辑。</p> <p> <img decoding="async" src="http://img.555519.xyz/uploads/20230206/64e9aed3a2294e14b4cd92d19889ce49.jpg" alt="面试官：@Transactional 注解是如何实现的？面试必问！"></p> <h2>@Transactional作用</h2> <p>根据上面的原理猜想，下面简单介绍每个步骤的源码以进行验证。推荐一个 Spring Boot 基础教程及实战示例：https://github.com/javastacks/spring-boot-best-practice</p> <p>首先是@Transactional，作用是定义代理植入点。我们知道代理对象创建的通过<code>BeanPostProcessor</code>的实现类<code>AnnotationAwareAspectJAutoProxyCreator</code>的<code>postProcessAfterInstantiation</code>方法来实现个，如果需要进行代理，那么在这个方法就会返回一个代理对象给容器，同时判断植入点也是在这个方法中。</p> <p>那么下面开始分析，在配置好注解驱动方式的事务管理之后，spring会在ioc容器创建一个<code>BeanFactoryTransactionAttributeSourceAdvisor</code>实例，这个实例可以看作是一个切点，在判断一个bean在初始化过程中是否需要创建代理对象，都需要验证一次<code>BeanFactoryTransactionAttributeSourceAdvisor</code>是否是适用这个bean的切点。如果是，就需要创建代理对象，并且把<code>BeanFactoryTransactionAttributeSourceAdvisor</code>实例注入到代理对象中。</p> <p>前文我们知道在<code>AopUtils#findAdvisorsThatCanApply</code>中判断切面是否适用当前bean，可以在这个地方断点分析调用堆栈，<code>AopUtils#findAdvisorsThatCanApply</code>一致调用，最终通过以下代码判断是否适用切点。</p> <ul> <li> <p><code>AbstractFallbackTransactionAttributeSource#computeTransactionAttribute(Method method, Class&lt;?&gt; targetClass)</code> 这里可以根据参数打上条件断点进行调试分析调用栈，targetClass就是目标class …一系列调用</p> </li> <li> <p>最终<code>SpringTransactionAnnotationParser#parseTransactionAnnotation(java.lang.reflect.AnnotatedElement)</code></p> </li> </ul> <pre class="has"><code class="language-go">@Override public&nbsp;TransactionAttribute&nbsp;parseTransactionAnnotation(AnnotatedElement&nbsp;ae)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;//这里就是分析Method是否被@Transactional注解标注，有的话，不用说BeanFactoryTransactionAttributeSourceAdvisor适配当前bean，进行代理，并且注入切点 &nbsp;&nbsp;&nbsp;&nbsp;//BeanFactoryTransactionAttributeSourceAdvisor &nbsp;&nbsp;&nbsp;AnnotationAttributes&nbsp;attributes&nbsp;=&nbsp;AnnotatedElementUtils.getMergedAnnotationAttributes(ae,&nbsp;Transactional.class); &nbsp;&nbsp;&nbsp;if&nbsp;(attributes&nbsp;!=&nbsp;null)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;parseTransactionAnnotation(attributes); &nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;else&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;null; &nbsp;&nbsp;&nbsp;} }</code></pre> <p>上面就是判断是否需要根据@Transactional进行代理对象创建的判断过程。@Transactional的作用一个就是标识方法需要被代理，一个就是携带事务管理需要的一些属性信息。</p> <p><strong>点击关注公众号，Java干货</strong><strong>及时送达</strong></p> <h2>动态代理逻辑实现</h2> <p>【aop实现原理分析】中知道，aop最终的代理对象的代理方法是</p> <ul> <li> <p><code>DynamicAdvisedInterceptor#intercept</code></p> </li> </ul> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw==&amp;mid=2247539795&amp;idx=2&amp;sn=42fec97b57d339b55c1e3c66d1624eff&amp;chksm=eb50d965dc275073becd2ebffe18b70960f347a3ee83a070933fb8ee8776f21b7a250ba2a398&amp;scene=21#wechat_redirect"  rel="nofollow">所以我们可以在这个方法断点分析代理逻辑。</a></p> <pre class="has"><code class="language-go">@Override public&nbsp;Object&nbsp;intercept(Object&nbsp;proxy,&nbsp;Method&nbsp;method,&nbsp;Object[]&nbsp;args,&nbsp;MethodProxy&nbsp;methodProxy)&nbsp;throws&nbsp;Throwable&nbsp;{ &nbsp;&nbsp;&nbsp;Object&nbsp;oldProxy&nbsp;=&nbsp;null; &nbsp;&nbsp;&nbsp;boolean&nbsp;setProxyContext&nbsp;=&nbsp;false; &nbsp;&nbsp;&nbsp;Class&lt;?&gt;&nbsp;targetClass&nbsp;=&nbsp;null; &nbsp;&nbsp;&nbsp;Object&nbsp;target&nbsp;=&nbsp;null; &nbsp;&nbsp;&nbsp;try&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(this.advised.exposeProxy)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Make&nbsp;invocation&nbsp;available&nbsp;if&nbsp;necessary. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldProxy&nbsp;=&nbsp;AopContext.setCurrentProxy(proxy); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setProxyContext&nbsp;=&nbsp;true; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;May&nbsp;be&nbsp;null.&nbsp;Get&nbsp;as&nbsp;late&nbsp;as&nbsp;possible&nbsp;to&nbsp;minimize&nbsp;the&nbsp;time&nbsp;we &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;"own"&nbsp;the&nbsp;target,&nbsp;in&nbsp;case&nbsp;it&nbsp;comes&nbsp;from&nbsp;a&nbsp;pool... &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;target&nbsp;=&nbsp;getTarget(); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(target&nbsp;!=&nbsp;null)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;targetClass&nbsp;=&nbsp;target.getClass(); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//follow &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List&lt;Object&gt;&nbsp;chain&nbsp;=&nbsp;this.advised.getInterceptorsAndDynamicInterceptionAdvice(method,&nbsp;targetClass); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Object&nbsp;retVal; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Check&nbsp;whether&nbsp;we&nbsp;only&nbsp;have&nbsp;one&nbsp;InvokerInterceptor:&nbsp;that&nbsp;is, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;no&nbsp;real&nbsp;advice,&nbsp;but&nbsp;just&nbsp;reflective&nbsp;invocation&nbsp;of&nbsp;the&nbsp;target. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(chain.isEmpty()&nbsp;&amp;&amp;&nbsp;Modifier.isPublic(method.getModifiers()))&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;We&nbsp;can&nbsp;skip&nbsp;creating&nbsp;a&nbsp;MethodInvocation:&nbsp;just&nbsp;invoke&nbsp;the&nbsp;target&nbsp;directly. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Note&nbsp;that&nbsp;the&nbsp;final&nbsp;invoker&nbsp;must&nbsp;be&nbsp;an&nbsp;InvokerInterceptor,&nbsp;so&nbsp;we&nbsp;know &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;it&nbsp;does&nbsp;nothing&nbsp;but&nbsp;a&nbsp;reflective&nbsp;operation&nbsp;on&nbsp;the&nbsp;target,&nbsp;and&nbsp;no&nbsp;hot &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;swapping&nbsp;or&nbsp;fancy&nbsp;proxying. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Object[]&nbsp;argsToUse&nbsp;=&nbsp;AopProxyUtils.adaptArgumentsIfNecessary(method,&nbsp;args); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retVal&nbsp;=&nbsp;methodProxy.invoke(target,&nbsp;argsToUse); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;We&nbsp;need&nbsp;to&nbsp;create&nbsp;a&nbsp;method&nbsp;invocation... &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retVal&nbsp;=&nbsp;new&nbsp;CglibMethodInvocation(proxy,&nbsp;target,&nbsp;method,&nbsp;args,&nbsp;targetClass,&nbsp;chain,&nbsp;methodProxy).proceed(); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retVal&nbsp;=&nbsp;processReturnType(proxy,&nbsp;target,&nbsp;method,&nbsp;retVal); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;retVal; &nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;finally&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(target&nbsp;!=&nbsp;null)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;releaseTarget(target); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(setProxyContext)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Restore&nbsp;old&nbsp;proxy. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AopContext.setCurrentProxy(oldProxy); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;} }</code></pre> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw==&amp;mid=2247539795&amp;idx=2&amp;sn=42fec97b57d339b55c1e3c66d1624eff&amp;chksm=eb50d965dc275073becd2ebffe18b70960f347a3ee83a070933fb8ee8776f21b7a250ba2a398&amp;scene=21#wechat_redirect"  rel="nofollow">通过分析</a> <code>List&lt;Object&gt; chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass)</code>返回的是TransactionInterceptor,利用TransactionInterceptor是如何实现代理逻辑调用的？</p> <p>跟踪<code>new CglibMethodInvocation(proxy, target, method, args, targetClass, chain, methodProxy).proceed();</code></p> <p>发现最终是调用<code>TransactionInterceptor#invoke</code>方法，并且把CglibMethodInvocation注入到invoke方法中，从上面可以看到<code>CglibMethodInvocation</code>是包装了目标对象的方法调用的所有必须信息，因此，在<code>TransactionInterceptor#invoke</code>里面也是可以调用目标方法的，并且还可以实现类似@Around的逻辑，在目标方法调用前后继续注入一些其他逻辑，比如事务管理逻辑。</p> <p>另外，Spring 系列面试题和答案全部整理好了，微信搜索Java技术栈，在后台发送：面试，可以在线阅读。</p> <h2>TransactionInterceptor–最终事务管理者</h2> <p>下面看代码。</p> <ul> <li> <p><code>TransactionInterceptor#invoke</code></p> </li> </ul> <pre class="has"><code class="language-go">@Override public&nbsp;Object&nbsp;invoke(final&nbsp;MethodInvocation&nbsp;invocation)&nbsp;throws&nbsp;Throwable&nbsp;{ &nbsp;//&nbsp;Work&nbsp;out&nbsp;the&nbsp;target&nbsp;class:&nbsp;may&nbsp;be&nbsp;{@code&nbsp;null}. &nbsp;//&nbsp;The&nbsp;TransactionAttributeSource&nbsp;should&nbsp;be&nbsp;passed&nbsp;the&nbsp;target&nbsp;class &nbsp;//&nbsp;as&nbsp;well&nbsp;as&nbsp;the&nbsp;method,&nbsp;which&nbsp;may&nbsp;be&nbsp;from&nbsp;an&nbsp;interface. &nbsp;Class&lt;?&gt;&nbsp;targetClass&nbsp;=&nbsp;(invocation.getThis()&nbsp;!=&nbsp;null&nbsp;?&nbsp;AopUtils.getTargetClass(invocation.getThis())&nbsp;:&nbsp;null);  &nbsp;//&nbsp;Adapt&nbsp;to&nbsp;TransactionAspectSupport's&nbsp;invokeWithinTransaction... &nbsp;return&nbsp;invokeWithinTransaction(invocation.getMethod(),&nbsp;targetClass,&nbsp;new&nbsp;InvocationCallback()&nbsp;{ &nbsp;&nbsp;@Override &nbsp;&nbsp;public&nbsp;Object&nbsp;proceedWithInvocation()&nbsp;throws&nbsp;Throwable&nbsp;{ &nbsp;&nbsp;&nbsp;return&nbsp;invocation.proceed(); &nbsp;&nbsp;} &nbsp;}); }</code></pre> <p>继续跟踪invokeWithinTransaction，下面的代码中其实就可以看出一些逻辑端倪，就是我们猜想的实现方式，<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw==&amp;mid=2247539795&amp;idx=2&amp;sn=42fec97b57d339b55c1e3c66d1624eff&amp;chksm=eb50d965dc275073becd2ebffe18b70960f347a3ee83a070933fb8ee8776f21b7a250ba2a398&amp;scene=21#wechat_redirect"  rel="nofollow">事务管理。</a></p> <pre class="has"><code class="language-go">protected&nbsp;Object&nbsp;invokeWithinTransaction(Method&nbsp;method,&nbsp;Class&lt;?&gt;&nbsp;targetClass,&nbsp;final&nbsp;InvocationCallback&nbsp;invocation) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throws&nbsp;Throwable&nbsp;{  &nbsp;&nbsp;&nbsp;//&nbsp;If&nbsp;the&nbsp;transaction&nbsp;attribute&nbsp;is&nbsp;null,&nbsp;the&nbsp;method&nbsp;is&nbsp;non-transactional. &nbsp;&nbsp;&nbsp;final&nbsp;TransactionAttribute&nbsp;txAttr&nbsp;=&nbsp;getTransactionAttributeSource().getTransactionAttribute(method,&nbsp;targetClass); &nbsp;&nbsp;&nbsp;final&nbsp;PlatformTransactionManager&nbsp;tm&nbsp;=&nbsp;determineTransactionManager(txAttr); &nbsp;&nbsp;&nbsp;final&nbsp;String&nbsp;joinpointIdentification&nbsp;=&nbsp;methodIdentification(method,&nbsp;targetClass);  &nbsp;&nbsp;&nbsp;if&nbsp;(txAttr&nbsp;==&nbsp;null&nbsp;||&nbsp;!(tm&nbsp;instanceof&nbsp;CallbackPreferringPlatformTransactionManager))&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Standard&nbsp;transaction&nbsp;demarcation&nbsp;with&nbsp;getTransaction&nbsp;and&nbsp;commit/rollback&nbsp;calls. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//开启事务 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TransactionInfo&nbsp;txInfo&nbsp;=&nbsp;createTransactionIfNecessary(tm,&nbsp;txAttr,&nbsp;joinpointIdentification); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Object&nbsp;retVal&nbsp;=&nbsp;null; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;This&nbsp;is&nbsp;an&nbsp;around&nbsp;advice:&nbsp;Invoke&nbsp;the&nbsp;next&nbsp;interceptor&nbsp;in&nbsp;the&nbsp;chain. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;This&nbsp;will&nbsp;normally&nbsp;result&nbsp;in&nbsp;a&nbsp;target&nbsp;object&nbsp;being&nbsp;invoked. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//方法调用 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retVal&nbsp;=&nbsp;invocation.proceedWithInvocation(); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch&nbsp;(Throwable&nbsp;ex)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;target&nbsp;invocation&nbsp;exception &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//回滚事务 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;completeTransactionAfterThrowing(txInfo,&nbsp;ex); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;ex; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finally&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cleanupTransactionInfo(txInfo); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//提交事务 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;commitTransactionAfterReturning(txInfo); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;retVal; &nbsp;&nbsp;&nbsp;}  &nbsp;&nbsp;&nbsp;else&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;It's&nbsp;a&nbsp;CallbackPreferringPlatformTransactionManager:&nbsp;pass&nbsp;a&nbsp;TransactionCallback&nbsp;in. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Object&nbsp;result&nbsp;=&nbsp;((CallbackPreferringPlatformTransactionManager)&nbsp;tm).execute(txAttr, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;TransactionCallback&lt;Object&gt;()&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@Override &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Object&nbsp;doInTransaction(TransactionStatus&nbsp;status)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TransactionInfo&nbsp;txInfo&nbsp;=&nbsp;prepareTransactionInfo(tm,&nbsp;txAttr,&nbsp;joinpointIdentification,&nbsp;status); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;invocation.proceedWithInvocation(); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch&nbsp;(Throwable&nbsp;ex)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(txAttr.rollbackOn(ex))&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;A&nbsp;RuntimeException:&nbsp;will&nbsp;lead&nbsp;to&nbsp;a&nbsp;rollback. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(ex&nbsp;instanceof&nbsp;RuntimeException)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;(RuntimeException)&nbsp;ex; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;ThrowableHolderException(ex); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;A&nbsp;normal&nbsp;return&nbsp;value:&nbsp;will&nbsp;lead&nbsp;to&nbsp;a&nbsp;commit. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;ThrowableHolder(ex); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finally&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cleanupTransactionInfo(txInfo); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Check&nbsp;result:&nbsp;It&nbsp;might&nbsp;indicate&nbsp;a&nbsp;Throwable&nbsp;to&nbsp;rethrow. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(result&nbsp;instanceof&nbsp;ThrowableHolder)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;((ThrowableHolder)&nbsp;result).getThrowable(); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;result; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch&nbsp;(ThrowableHolderException&nbsp;ex)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;ex.getCause(); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;} }</code></pre> <h2>总结</h2> <p>最终可以总结一下整个流程，跟开始的猜想对照。另外，关注公众号Java技术栈，在后台回复：面试，可以获取我整理的 Spring 系列面试题和答案，非常齐全。</p> <p> <img decoding="async" src="http://img.555519.xyz/uploads/20230206/fae51ace0b8e8fb29597b45e99988c06.jpg" alt="面试官：@Transactional 注解是如何实现的？面试必问！"></p> <p>分析源码后对照</p> <p> <img decoding="async" src="http://img.555519.xyz/uploads/20230206/086e284a37bca08e3becc75291fd0227.jpg" alt="面试官：@Transactional 注解是如何实现的？面试必问！"></p> <p>原文链接：https://blog.csdn.net/qq_20597727/article/details/84868035</p> <p>版权声明：本文为CSDN博主「一撸向北」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。</p> <p style="text-align:left;"></p> <p style="text-align:left;"><strong style="font-size: 16px; text-align: center;">关注Java技术栈看更多干货</strong><span style="font-size: 16px; text-align: center;">获取&nbsp;Spring Boot&nbsp;实战笔记！</span></p> <p> </div> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-47628.htm">动物医院医生聘用合同怎么写（动物医院医生聘用合同怎么写范文）</a></p>
                                        <p>下一个：<a href="/news/article-48119.htm">在打包vue项目时报错的问题解决</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-26801.htm" title="Spring（六）&#8212;-Spring AOP概述及底层实现原理">Spring（六）&#8212;-Spring AOP概述及底层实现原理</a></li>
                        <li class="py-2"><a href="/news/article-24955.htm" title="新疆宠物救助 新疆宠物救助中心电话">新疆宠物救助 新疆宠物救助中心电话</a></li>
                        <li class="py-2"><a href="/news/article-39714.htm" title="FreeRTOS进阶之任务切换完全分析_操作系统_">FreeRTOS进阶之任务切换完全分析_操作系统_</a></li>
                        <li class="py-2"><a href="/news/article-41691.htm" title="Zookeeper 基本概念">Zookeeper 基本概念</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-19-winxray-github.htm" title="「1月19日」最高速度18.6M/S，2025年Free Xray Node每天更新免费机场订阅节点链接">「1月19日」最高速度18.6M/S，2025年Free Xray Node每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-13-winxray-github.htm" title="「12月13日」最高速度18.2M/S，2024年Free Xray Node每天更新免费机场订阅节点链接">「12月13日」最高速度18.2M/S，2024年Free Xray Node每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-11-winxray-github.htm" title="「12月11日」最高速度20.2M/S，2024年Free Xray Node每天更新免费机场订阅节点链接">「12月11日」最高速度20.2M/S，2024年Free Xray Node每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-28-winxray-node-github.htm" title="「11月28日」最高速度20.6M/S，2024年Free Xray Node每天更新免费机场订阅节点链接">「11月28日」最高速度20.6M/S，2024年Free Xray Node每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-8-winxray-node-share.htm" title="「11月8日」最高速度19.5M/S，2024年Free Xray Node每天更新免费机场订阅节点链接">「11月8日」最高速度19.5M/S，2024年Free Xray Node每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-31-winxray-node.htm" title="「1月31日」最高速度21.5M/S，2025年Free Xray Node每天更新免费机场订阅节点链接">「1月31日」最高速度21.5M/S，2025年Free Xray Node每天更新免费机场订阅节点链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">25</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
    <!-- //middle section -->
        <!-- footer -->
    <footer class="w3l-footer-22 position-relative mt-5 pt-5">
        <!-- copyright -->
        <div class="copyright-footer text-center">
            <div class="container">
                <div class="columns">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                    <p>Free Xray Node机场节点官网 版权所有 Powered by WordPress</p>
                </div>
            </div>
        </div>
        <!-- //copyright -->
    </footer>
    <!-- //footer -->
    <!-- Js scripts -->
    <!-- move top -->
    <button onclick="topFunction()" id="movetop" title="Go to top">
        <span class="fa fa-level-up" aria-hidden="true"></span>
    </button>
    <script>
    // When the user scrolls down 20px from the top of the document, show the button
    window.onscroll = function() {
        scrollFunction()
    };

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            document.getElementById("movetop").style.display = "block";
        } else {
            document.getElementById("movetop").style.display = "none";
        }
    }

    // When the user clicks on the button, scroll to the top of the document
    function topFunction() {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
    }
    </script>
    <!-- //move top -->
    <!-- common jquery plugin -->
    <script src="/assets/website/js/frontend/freexraynode/jquery-3.5.1.min.js"></script>
    <!-- //common jquery plugin -->
    <!-- theme switch js (light and dark)-->
    <script src="/assets/website/js/frontend/freexraynode/theme-change.js"></script>
    <script>
    function autoType(elementClass, typingSpeed) {
        var thhis = $(elementClass);
        thhis.css({
            "position": "relative",
            "display": "inline-block"
        });
        thhis.prepend('<div class="cursor" style="right: initial; left:0;"></div>');
        thhis = thhis.find(".text-js");
        var text = thhis.text().trim().split('');
        var amntOfChars = text.length;
        var newString = "";
        thhis.text("|");
        setTimeout(function() {
            thhis.css("opacity", 1);
            thhis.prev().removeAttr("style");
            thhis.text("");
            for (var i = 0; i < amntOfChars; i++) {
                (function(i, char) {
                    setTimeout(function() {
                        newString += char;
                        thhis.text(newString);
                    }, i * typingSpeed);
                })(i + 1, text[i]);
            }
        }, 1500);
    }

    $(document).ready(function() {
        // Now to start autoTyping just call the autoType function with the 
        // class of outer div
        // The second paramter is the speed between each letter is typed.   
        autoType(".type-js", 200);
    });
    </script>
    <!-- //theme switch js (light and dark)-->
    <!-- magnific popup -->
    <script src="/assets/website/js/frontend/freexraynode/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //magnific popup -->
    <!-- MENU-JS -->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!-- //MENU-JS -->
    <!-- for testimonials carousel -->
    <script src="/assets/website/js/frontend/freexraynode/owl.carousel.js"></script>
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: true
                },
                600: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 1,
                    nav: true,
                    loop: true
                }
            }
        })
    })
    </script>
    <!-- //for testimonials carousel -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })
    });
    </script>
    <!-- //disable body scroll which navbar is in active -->
    <!--bootstrap-->
    <script src="/assets/website/js/frontend/freexraynode/bootstrap.min.js"></script>
    <!-- //bootstrap-->
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
    <!-- //Js scripts -->
</body>

</html>